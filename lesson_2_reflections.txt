# What happens when you initialize a repository? Why do you need to do it?

When you run "git init" you create the .git folder, which is normally a hidden folder. This sets up the repository you are in to have version control. But the first commit doesn't happen automatically, so you will need to create your first commit. You need to run "git init" in order to get version control in place.

# How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is where you put files ready to be commited. You might have a logical change to 3 files, and move those to staging. And then you might move 2 others for a commit at a later time. The value is that you don't have to commit all files in a repository at once. (Although, I thought all files are moved in a repository anyway, so why does it matter what's moved to staging?)

# How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to compare the file in there to your working directory, or to the repository commit to see what changes were made. If you see a lot of changes, you know you have too many in one commit.

# What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you want to make an alternate version or experimental version of your code. They allow you to keep a stable copy of the standard code (i.e., master) while branching off and experimenting with new ideas.

# How do the diagrams help you visualize the branch structure?

You can see where the master is, and where the experimental branches are.

# What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The master and changes from the branch are incorporated together. It's represented as a fork in the diagram because the master can continue to change while you experiment with the branch.

# What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros include less steps for the user, but can overwrite or change something you didn't intend. Manually takes more time, but allows you to introduce human element to review and confirm changes.
